// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegBaccaratResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "RegBaccaratResponse.pbobjc.h"
 #import "RestfulBaseResponse.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RegBaccaratResponseRoot

@implementation RegBaccaratResponseRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RegBaccaratResponseRoot_FileDescriptor

static GPBFileDescriptor *RegBaccaratResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fanxi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RegBaccaratResponse

@implementation RegBaccaratResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic state;
@dynamic reference;
@dynamic history;
@dynamic player;
@dynamic playerPair;
@dynamic tie;
@dynamic bankerPair;
@dynamic banker;
@dynamic timeRemaining;
@dynamic ruleTime;
@dynamic playerCards;
@dynamic bankerCards;
@dynamic playerIns;
@dynamic bankerIn;

typedef struct RegBaccaratResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t state;
  int32_t timeRemaining;
  RestfulBaseResponse *baseResponse;
  NSString *history;
  NSString *ruleTime;
  NSString *playerCards;
  NSString *bankerCards;
  int64_t reference;
  int64_t player;
  int64_t playerPair;
  int64_t tie;
  int64_t bankerPair;
  int64_t banker;
  int64_t playerIns;
  int64_t bankerIn;
} RegBaccaratResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(RestfulBaseResponse),
        .number = RegBaccaratResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reference",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_Reference,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, reference),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "history",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_History,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, history),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_Player,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerPair",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_PlayerPair,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, playerPair),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tie",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_Tie,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, tie),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bankerPair",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_BankerPair,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, bankerPair),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "banker",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_Banker,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, banker),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timeRemaining",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_TimeRemaining,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, timeRemaining),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ruleTime",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_RuleTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, ruleTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerCards",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_PlayerCards,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, playerCards),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankerCards",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_BankerCards,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, bankerCards),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIns",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_PlayerIns,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, playerIns),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bankerIn",
        .dataTypeSpecific.className = NULL,
        .number = RegBaccaratResponse_FieldNumber_BankerIn,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(RegBaccaratResponse__storage_, bankerIn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegBaccaratResponse class]
                                     rootClass:[RegBaccaratResponseRoot class]
                                          file:RegBaccaratResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegBaccaratResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\014\000\010\n\000\n\n\000\014\r\000\r\010\000\016\013\000\017\013\000\020\t\000\021\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
