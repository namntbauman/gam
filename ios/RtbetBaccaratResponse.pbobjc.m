// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RTBetBaccaratResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "RtbetBaccaratResponse.pbobjc.h"
 #import "BaseResponse.pbobjc.h"
 #import "RouletteBetEntity.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RtbetBaccaratResponseRoot

@implementation RtbetBaccaratResponseRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RtbetBaccaratResponseRoot_FileDescriptor

static GPBFileDescriptor *RtbetBaccaratResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fanxi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RTBetBaccaratResponse

@implementation RTBetBaccaratResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic reference;
@dynamic player;
@dynamic playerPair;
@dynamic tie;
@dynamic banker;
@dynamic bankerPair;
@dynamic betsArray, betsArray_Count;

typedef struct RTBetBaccaratResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSMutableArray *betsArray;
  int64_t reference;
  int64_t player;
  int64_t playerPair;
  int64_t tie;
  int64_t banker;
  int64_t bankerPair;
} RTBetBaccaratResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RTBetBaccaratResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RTBetBaccaratResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reference",
        .dataTypeSpecific.className = NULL,
        .number = RTBetBaccaratResponse_FieldNumber_Reference,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RTBetBaccaratResponse__storage_, reference),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = NULL,
        .number = RTBetBaccaratResponse_FieldNumber_Player,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RTBetBaccaratResponse__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerPair",
        .dataTypeSpecific.className = NULL,
        .number = RTBetBaccaratResponse_FieldNumber_PlayerPair,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RTBetBaccaratResponse__storage_, playerPair),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tie",
        .dataTypeSpecific.className = NULL,
        .number = RTBetBaccaratResponse_FieldNumber_Tie,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RTBetBaccaratResponse__storage_, tie),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "banker",
        .dataTypeSpecific.className = NULL,
        .number = RTBetBaccaratResponse_FieldNumber_Banker,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RTBetBaccaratResponse__storage_, banker),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bankerPair",
        .dataTypeSpecific.className = NULL,
        .number = RTBetBaccaratResponse_FieldNumber_BankerPair,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RTBetBaccaratResponse__storage_, bankerPair),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "betsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RouletteBetEntity),
        .number = RTBetBaccaratResponse_FieldNumber_BetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RTBetBaccaratResponse__storage_, betsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RTBetBaccaratResponse class]
                                     rootClass:[RtbetBaccaratResponseRoot class]
                                          file:RtbetBaccaratResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RTBetBaccaratResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\014\000\006\n\000\t\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
