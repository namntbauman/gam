// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserTo.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "UserTo.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UserToRoot

@implementation UserToRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - UserToRoot_FileDescriptor

static GPBFileDescriptor *UserToRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fanxi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - UserTo

@implementation UserTo

@dynamic userId;
@dynamic typeTo;
@dynamic callMoney;
@dynamic minCall;
@dynamic totalCall;
@dynamic cash;

typedef struct UserTo__storage_ {
  uint32_t _has_storage_[1];
  int32_t typeTo;
  NSString *userId;
  int64_t callMoney;
  int64_t minCall;
  int64_t totalCall;
  int64_t cash;
} UserTo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = UserTo_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserTo__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "typeTo",
        .dataTypeSpecific.className = NULL,
        .number = UserTo_FieldNumber_TypeTo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserTo__storage_, typeTo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "callMoney",
        .dataTypeSpecific.className = NULL,
        .number = UserTo_FieldNumber_CallMoney,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserTo__storage_, callMoney),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "minCall",
        .dataTypeSpecific.className = NULL,
        .number = UserTo_FieldNumber_MinCall,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserTo__storage_, minCall),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalCall",
        .dataTypeSpecific.className = NULL,
        .number = UserTo_FieldNumber_TotalCall,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserTo__storage_, totalCall),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cash",
        .dataTypeSpecific.className = NULL,
        .number = UserTo_FieldNumber_Cash,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserTo__storage_, cash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserTo class]
                                     rootClass:[UserToRoot class]
                                          file:UserToRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserTo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006\000\002\006\000\003\t\000\004\007\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
