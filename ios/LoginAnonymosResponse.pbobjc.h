// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginAnonymosResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - LoginAnonymosResponseRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface LoginAnonymosResponseRoot : GPBRootObject
@end

#pragma mark - LoginAnonymousResponse

typedef GPB_ENUM(LoginAnonymousResponse_FieldNumber) {
  LoginAnonymousResponse_FieldNumber_Mid = 1,
  LoginAnonymousResponse_FieldNumber_Code = 2,
  LoginAnonymousResponse_FieldNumber_Des = 3,
  LoginAnonymousResponse_FieldNumber_UserId = 4,
  LoginAnonymousResponse_FieldNumber_Type = 5,
  LoginAnonymousResponse_FieldNumber_UserName = 6,
  LoginAnonymousResponse_FieldNumber_DisplayName = 7,
  LoginAnonymousResponse_FieldNumber_Token = 8,
  LoginAnonymousResponse_FieldNumber_Server = 9,
};

@interface LoginAnonymousResponse : GPBMessage

@property(nonatomic, readwrite) int32_t mid;

@property(nonatomic, readwrite) BOOL hasMid;
@property(nonatomic, readwrite) int32_t code;

@property(nonatomic, readwrite) BOOL hasCode;
@property(nonatomic, readwrite, copy, null_resettable) NSString *des;
/** Test to see if @c des has been set. */
@property(nonatomic, readwrite) BOOL hasDes;

@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;
/** Test to see if @c userId has been set. */
@property(nonatomic, readwrite) BOOL hasUserId;

@property(nonatomic, readwrite) int32_t type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *userName;
/** Test to see if @c userName has been set. */
@property(nonatomic, readwrite) BOOL hasUserName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *displayName;
/** Test to see if @c displayName has been set. */
@property(nonatomic, readwrite) BOOL hasDisplayName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

@property(nonatomic, readwrite, copy, null_resettable) NSString *server;
/** Test to see if @c server has been set. */
@property(nonatomic, readwrite) BOOL hasServer;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
