// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegRouletteResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "RegRouletteResponse.pbobjc.h"
 #import "RestfulBaseResponse.pbobjc.h"
 #import "RouletteBetEntity.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RegRouletteResponseRoot

@implementation RegRouletteResponseRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RegRouletteResponseRoot_FileDescriptor

static GPBFileDescriptor *RegRouletteResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fanxi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RegRouletteResponse

@implementation RegRouletteResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic yourBet;
@dynamic totalBet;
@dynamic state;
@dynamic isGold;
@dynamic timeRemaining;
@dynamic ruleTime;
@dynamic reference;
@dynamic result;
@dynamic history;
@dynamic betsArray, betsArray_Count;

typedef struct RegRouletteResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t state;
  int32_t timeRemaining;
  int32_t result;
  RestfulBaseResponse *baseResponse;
  NSString *ruleTime;
  NSString *history;
  NSMutableArray *betsArray;
  int64_t yourBet;
  int64_t totalBet;
  int64_t reference;
} RegRouletteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(RestfulBaseResponse),
        .number = RegRouletteResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "yourBet",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_YourBet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, yourBet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalBet",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_TotalBet,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, totalBet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_State,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isGold",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_IsGold,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timeRemaining",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_TimeRemaining,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, timeRemaining),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ruleTime",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_RuleTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, ruleTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reference",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_Reference,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, reference),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_Result,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "history",
        .dataTypeSpecific.className = NULL,
        .number = RegRouletteResponse_FieldNumber_History,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, history),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "betsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RouletteBetEntity),
        .number = RegRouletteResponse_FieldNumber_BetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RegRouletteResponse__storage_, betsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegRouletteResponse class]
                                     rootClass:[RegRouletteResponseRoot class]
                                          file:RegRouletteResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegRouletteResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\014\000\004\007\000\005\010\000\007\006\000\010\r\000\t\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
