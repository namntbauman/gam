// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserDetail.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "UserDetail.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UserDetailRoot

@implementation UserDetailRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - UserDetailRoot_FileDescriptor

static GPBFileDescriptor *UserDetailRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fanxi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - UserDetail

@implementation UserDetail

@dynamic userId;
@dynamic type;
@dynamic userName;
@dynamic displayName;
@dynamic token;
@dynamic server;
@dynamic avatarURL;
@dynamic cash;
@dynamic gold;
@dynamic facebookId;

typedef struct UserDetail__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *userId;
  NSString *userName;
  NSString *displayName;
  NSString *token;
  NSString *server;
  NSString *avatarURL;
  NSString *facebookId;
  int64_t cash;
  int64_t gold;
} UserDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserDetail__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserDetail__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_UserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserDetail__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_DisplayName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserDetail__storage_, displayName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_Token,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserDetail__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "server",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_Server,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserDetail__storage_, server),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatarURL",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_AvatarURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UserDetail__storage_, avatarURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cash",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_Cash,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UserDetail__storage_, cash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_Gold,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UserDetail__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "facebookId",
        .dataTypeSpecific.className = NULL,
        .number = UserDetail_FieldNumber_FacebookId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UserDetail__storage_, facebookId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserDetail class]
                                     rootClass:[UserDetailRoot class]
                                          file:UserDetailRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserDetail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006\000\003\010\000\004\013\000\007\007!!\000\n\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
