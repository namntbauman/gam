// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EndResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "EndResponse.pbobjc.h"
 #import "BaseResponse.pbobjc.h"
 #import "Player.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EndResponseRoot

@implementation EndResponseRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - EndResponseRoot_FileDescriptor

static GPBFileDescriptor *EndResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fanxi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - EndResponse

@implementation EndResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic zoneId;
@dynamic tableIndex;
@dynamic matchId;
@dynamic idWin;
@dynamic perfectType;
@dynamic uid;
@dynamic lastCards;
@dynamic autoTime;
@dynamic reference;
@dynamic resultsArray, resultsArray_Count;
@dynamic fightInfoArray, fightInfoArray_Count;
@dynamic nextPlayingArray, nextPlayingArray_Count;

typedef struct EndResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t zoneId;
  int32_t tableIndex;
  int32_t perfectType;
  int32_t autoTime;
  BaseResponse *baseResponse;
  NSString *matchId;
  NSString *idWin;
  NSString *uid;
  NSString *lastCards;
  NSMutableArray *resultsArray;
  NSMutableArray *fightInfoArray;
  NSMutableArray *nextPlayingArray;
  int64_t reference;
} EndResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = EndResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "zoneId",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_ZoneId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndResponse__storage_, zoneId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tableIndex",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_TableIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EndResponse__storage_, tableIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "matchId",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_MatchId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EndResponse__storage_, matchId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idWin",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_IdWin,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EndResponse__storage_, idWin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "perfectType",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_PerfectType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(EndResponse__storage_, perfectType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_Uid,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(EndResponse__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastCards",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_LastCards,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(EndResponse__storage_, lastCards),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "autoTime",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_AutoTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(EndResponse__storage_, autoTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reference",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_Reference,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(EndResponse__storage_, reference),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "resultsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Player),
        .number = EndResponse_FieldNumber_ResultsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EndResponse__storage_, resultsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fightInfoArray",
        .dataTypeSpecific.className = NULL,
        .number = EndResponse_FieldNumber_FightInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EndResponse__storage_, fightInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nextPlayingArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Player),
        .number = EndResponse_FieldNumber_NextPlayingArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EndResponse__storage_, nextPlayingArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndResponse class]
                                     rootClass:[EndResponseRoot class]
                                          file:EndResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\014\000\004\006\000\005\n\000\006\007\000\007\005\000\010\013\000\n\t\000\013\010\000\016\000fightInfo\000\017\000n"
        "extPlaying\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
